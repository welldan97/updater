#!/usr/bin/env bash

set -e

main() {
  use-sudo
  case "$1" in
    count | list | update)
    ;;
    help | '')
      help
      exit 0
    ;;
    *)
      echo "ERROR: unknown command \"$1\""
      help
      exit 1
      ;;
  esac

  if [ "$2" == '--no-fetch' ] || [ "$3" == '--no-fetch' ]; then
    no_fetch='--no-fetch'
  fi

  if [ "$2" != '--no-fetch' ] && [ ! -z "$2" ]; then
    updater_to_use="updater-$2"
  fi

  updaters | while read -r updater; do
    # shellcheck source=/dev/null
    source "$updater"

    updater_handle="$(basename "$updater")"

    if "$updater_handle-detect" &&
        ([ "$updater_handle" == "$updater_to_use" ] ||
         [ -z "$updater_to_use" ]) ; then
      echo "$("$updater_handle-name"):"

      case "$1" in
        count)
          "$updater_handle-list" "$no_fetch" | wc -l | sed -e 's/^[ \t]*//'
          ;;
        list)
          "$updater_handle-list" "$no_fetch" | while read -r line; do
            echo "  $line";
          done
          ;;
        update)
          "$updater_handle-update"
          ;;
      esac
      echo ""
    fi
  done
}

help() {
 cat << EOF
Usage:
  updater update [updater]
  updater list [updater] [--no-fetch]
  updater count [updater] [--no-fetch]
  updater help

Commands:
  update   Update everything
  list     List available updates
  count    Count available updates
  help     Show help

Options:
  [updater]    Updater you want to use for command, i.e. brew
  --no-fetch   Try not to fetch info about new updates, and show the result of
               the previous command run without this argument
EOF
}

updaters() {
  if [ -z "$UPDATER_PATH" ]; then
    UPDATER_PATH=$(updaters-defult-path)
  fi
  find "$UPDATER_PATH" -iname "updater-*"
}

updaters-defult-path() {
  echo "$(this-script-location)/updater.d"
}

this-script-location() {
  # SOURCE: http://stackoverflow.com/a/246128/319918

  SOURCE="${BASH_SOURCE[0]}"
  while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
    DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  done
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  echo "$DIR"
}

use-sudo() {
  sudo -v
  while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &
}

main "$@"
